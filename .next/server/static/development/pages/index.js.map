{"version":3,"file":"static\\development\\pages\\index.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/markdown.js","webpack:///./components/output.js","webpack:///./pages/index.js","webpack:///external \"dompurify\"","webpack:///external \"marked\"","webpack:///external \"react\"","webpack:///external \"styled-jsx/style\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","const markdown = {\r\n    markdown: \"Markdown is a markup language that uses regular characters to style and format a document.  It is often used in documents such as .readme files to make them more visually appealing.\\r\\rTo see different examples of markdown effects you can use the dropdown menu to select which example you wish to see.  You can change the text in the input field to preview your own text and explore all the different combinations of effects you can achieve with markdown.\\r\\r*To read more about the history of markup languages and where the name comes from click [here](https://en.wikipedia.org/wiki/Markup_language).*\",\r\n    h1: \"# Start line with one hashtag followed by text\",\r\n    h2: \"## Start line with two hashtags followed by text\",\r\n    h3: \"### Start line with three hashtags followed by text\",\r\n    h4: \"#### Start line with four hashtags followed by text\",\r\n    h5: \"##### Start line with five hashtags followed by text\",\r\n    h6: \"###### Start line with six hashtags followed by text\",\r\n    italic: \"Wrap text in single *asterisks*\",\r\n    bold: \"Wrap text in double asterisks to make **Bold Text**\",\r\n    strikethrough: \"Wrap text in tilde symbols ( ~ ) to ~strikethrough~ \",\r\n    linebreak: \"A line with three underscores with no spaces and no other characters\\r\\r**Result:**\\r___\\r\\r\\rA line with three asterisks with no spaces and no other characters\\r\\r**Result:**\\r***\\r\\r\\rA line with three dashes with no spaces and no other characters\\r\\r**Result:**\\r\\r---\\r\\r\\r\",\r\n    inlineCode: \"With code that will fit onto a single line wrap the `code` in backticks\\r\\r\\rIf you have backticks in your code you can `` `escape your backticks in your code` `` by wrapping the code with double backticks instead of single backticks\\r\\r\\r*Make sure to leave a space between the double backticks and the single backtick.  If you don't the markdown editor will interpret this as a triple backtick which is used to mark a multi-line block of code*\",\r\n    multiLineCode: \"To create a multi-line block of code wrap the code in triple backticks\\r\\r\\r**Result:**\\r```\\rfunction foo(){\\r    alert( `foo` ); \\r    //To indent lines of code use tabs\\r};\\r ``` \",\r\n    links: \"To create a link, or [hyperlink](https://en.wikipedia.org/wiki/Hyperlink), wrap the text you want the user to see in square brackets followed by the URL in parentheses\\r\\r\\r\",\r\n    blockquote: \">To create a single indented blockquote start the line with a single greater-than character\\r\\r\\r> >To create a double indented blockquote start the line with two greater than characters\",\r\n    bulletedList: \"- Start each line with a dash followed by a space to make a bulleted list\\r- Start each line with a dash followed by a space to make a bulleted list\\r- Start each line with a dash followed by a space to make a bulleted list\\r- Start each line with a dash followed by a space to make a bulleted list\\r\\r - Or start each line with a space followed by a dash followed by a space to make a open bulleted list\\r - Or start each line with a space followed by a dash followed by a space to make a open bulleted list\",\r\n    numberedList: \"1. Start each line with a number followed by a period followed by a space followed by text\\r3. You can use any number you want\\r4. Markdown will still show the next number\\r10. Markdown will still show the next sequential number\",\r\n    image: \"Start line with an exclamation point followed by a description of the image wrapped in parentheses followed by the url wrapped in square brackets\\r\\r\\r![React Logo](https://goo.gl/Umyytc)\",\r\n    table: \"| To make | a table | wrap | text in | pipes | (vertical slashes) |\\r|-|-|-|-|-|-|\\r| On the second | line place one | dash wrapped | in pipes | for every | table cell |\\r| *The first two rows* | *must have the* | *same* | *number* | *of cells* |\\r| For Every | Row |  Wrap Text | In Pipes |\\r| If There Are Less Cells | The Table Will | Automatically | Fill In Blank Cells |\\r| &nbsp; |\\r||| You can | place |\\r||| text at | the end | of a row|\\r||| By placing | extra | pipes | before your text |\"\r\n}\r\n\r\nexport default markdown;","const output = (props, {cssTest}) => {\r\n\r\n    return (\r\n        <div id=\"output\">\r\n            <h4><strong>OUTPUT:</strong></h4>\r\n            <div id='preview' className={cssTest} dangerouslySetInnerHTML={props.setMarkdown}>\r\n            </div>\r\n                <style jsx>{`\r\n                #output > h4 {\r\n                    text-align: left;\r\n                    margin: 16px 0 16px 0;\r\n                }\r\n                #preview{\r\n                    width: 762px;\r\n                    margin: 0 auto 50px auto;\r\n                    border: 5px solid black;\r\n                    text-align: left;\r\n                    padding: 25px;\r\n                }\r\n                `}</style>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default output;","import React, { Component } from 'react';\r\nimport marked from 'marked';\r\nimport DOMPurify from 'dompurify';\r\n\r\nimport Output from '../components/output';\r\nimport markdown from '../components/markdown';\r\n/*\r\nGive \"Markdown\" in page header a tooltip with a brief explanation of what markdown is.  \r\n*/\r\nclass Home extends Component{\r\n    state = {\r\n        key: \"Markdown\",\r\n        input: \"Markdown is a markup language that uses regular characters to style and format a document.  It is often used in documents such as .readme files to make them more visually appealing.\\r\\rTo see different examples of markdown effects you can use the dropdown menu to select which example you wish to see.  You can change the text in the input field to preview your own text and explore all the different combinations of effects you can achieve with markdown.\\r\\r*To read more about the history of markup languages and where the name comes from click [here](https://en.wikipedia.org/wiki/Markup_language).*\"\r\n    };\r\n\r\n    componentDidMount(){\r\n        //Remove space from url demonstration\r\n        if( document.querySelector(\"a\") ){\r\n            const link = document.querySelector(\"a\").textContent;\r\n            const editedLink = link.split(\"\").filter(e=> e!= \" \").join(\"\");\r\n            document.querySelector(\"a\").textContent = editedLink;\r\n        }\r\n    }\r\n\r\n    changeListener(event) {\r\n        this.setState({\r\n            input: event\r\n        });\r\n    }\r\n\r\n    getMarkdown = () =>{\r\n        const markdown = marked(this.state.input, {sanitize: true, tables: true, breaks: true}, );\r\n        return {__html: markdown};\r\n    }\r\n\r\n    handleSelect = (e)=>{\r\n        const key = e.target.value\r\n        const newInput = markdown[key];\r\n        const cleanInput = DOMPurify.sanitize(newInput);\r\n        this.setState({\r\n            key: key,\r\n            input: newInput\r\n        });\r\n        this.setState({input: cleanInput});\r\n     };\r\n    \r\n    render() {\r\n    \r\n        const items = [];\r\n        const keys = Object.keys(markdown);\r\n        keys.forEach(key=> {\r\n            items.push(<option key={markdown[key]}>{key}</option>) \r\n        });\r\n        \r\n        return (\r\n            <div >\r\n                <h1>Markdown Previewer</h1>\r\n                    <div className=\"flexRow\">\r\n                        <h4><strong>INPUT:</strong></h4>\r\n                        <select \r\n                        id=\"select\"\r\n                        onChange={e=> this.handleSelect(e)}>\r\n                            {items}\r\n                        </select>\r\n                    </div>\r\n                    <textarea\r\n                        id=\"editor\"\r\n                        value={this.state.input}\r\n                        onChange={e=> this.changeListener(e.target.value)}\r\n                    />\r\n\r\n                    <Output setMarkdown={this.getMarkdown()} />\r\n                    <style jsx global>{`\r\n                        .flexRow {\r\n                            width: 822px;\r\n                            display: flex;\r\n                            flex-direction: row;\r\n                            justify-content: start;\r\n                            margin: 0 auto 12px auto;\r\n                        }\r\n                        .flexRow > h4 {\r\n                            text-align: left;\r\n                            display: inline;\r\n                            margin: 4px 10px 4px 0;\r\n                        }\r\n                        .flexRow > select {\r\n                            width: 100%;\r\n                        }\r\n                        textarea {\r\n                            width: 800px;\r\n                            height: 200px;\r\n                            margin: auto;\r\n                            padding: 10px;\r\n                        }\r\n                        div {\r\n                            width: 800px;\r\n                            margin: 0 auto;\r\n                            text-align: center;\r\n                            font-size: 16px;\r\n                            font-family: 'Lato';\r\n                        }\r\n                        h1 {\r\n                            font-size: 5em;\r\n                            font-weight: 100;\r\n                        }\r\n                        h2 {\r\n                            font-size: 4em;\r\n                            font-weight: 200;\r\n                        }\r\n                        h3 {\r\n                            font-size: 3em;\r\n                            font-weight: 300;\r\n                        }\r\n                        table {\r\n                            border-collapse: collapse;\r\n                        }\r\n                        td,\r\n                        th {\r\n                            border: 4px solid #343434;\r\n                            padding: 5px;\r\n                        }\r\n                        code {\r\n                            width: auto;\r\n                            display: inline-block;\r\n                            background: #343434;\r\n                            color: white;\r\n                            line-height:150%;\r\n                            padding: 10px;\r\n                        }\r\n                        hr {\r\n                            width: 97%;\r\n                            margin-left: 0!important;\r\n                        }\r\n                        ul,\r\n                        ol {\r\n                            width: 95%;\r\n                            margin: 25px 0;\r\n                        }\r\n                        p > img {\r\n                            width: 200px;\r\n                            height: auto;\r\n                        }\r\n                    `}</style>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","module.exports = require(\"dompurify\");","module.exports = require(\"marked\");","module.exports = require(\"react\");","module.exports = require(\"styled-jsx/style\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAsBA;;;;;;;;;;;;;;;;;;;;;;ACtBA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAmBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AAEA;AACA;AACA;;;;AAGA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAFA;AACA;AAFA;AAsBA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAzBA;AA2BA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAAA;AAAA;AACA;AAnCA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAiBA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBA;AAAA;AAAA;AA0FA;AACA;AAzIA;AACA;AA0IA;;;;;;;;;;;;;;;;;;;;;;;ACpJA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}